/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        if(l1==NULL and l2==NULL){
            return NULL;
        }
        if(l1==NULL and l2!=NULL){
            return l2;
        }
        if(l1!=NULL and l2==NULL){
            return l1;
        }


        stack<int>s1,s2;
        while(l1){
            s1.push(l1->val);
            l1 = l1->next;
        }
        while(l2){
            s2.push(l2->val);
            l2 = l2->next;
        }
        int carry = 0;
        ListNode* ans = NULL;
        while(!s1.empty() and !s2.empty()){
            int v1 = s1.top();
            int v2 = s2.top();
            s1.pop();
            s2.pop();
            int newval = (v1+v2+carry)%10;
            carry = (v1+v2+carry)/10;
            ListNode* node = new ListNode(newval);
            node->next = ans;
            ans = node;
        }
        while(!s1.empty()){
            int v = s1.top();
            s1.pop();
            int newval = (v+carry)%10;
            carry = (v+carry)/10;
            ListNode* node = new ListNode(newval);
            node->next = ans;
            ans = node;
        }
        while(!s2.empty()){
            int v = s2.top();
            s2.pop();
            int newval = (v+carry)%10;
            carry = (v+carry)/10;
            ListNode* node = new ListNode(newval);
            node->next = ans;
            ans = node;
        }
        if(carry){
            ListNode* node = new ListNode(carry);
            node->next = ans;
            ans = node;
        }
        return ans;
        
    }
};
